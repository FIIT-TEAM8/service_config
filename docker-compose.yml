version: '3'
services:

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    # command to keep issuing new SSL certificats
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nginx:
    image: nginx:1.21.3
    container_name: nginx
    restart: always
    depends_on:
      - es01
      - flask_server
      - node_server
      - mongo_express
      - scraper
      - pgadmin
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - /home/fiitkar/docker-folder/data/nginx/auth/.htpasswd:/etc/apache2/.htpasswd
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/nginx-static:/usr/share/nginx/html
      - ./data/webdav:/data/www
    # reload nginx based on config
    # keep reloading nginx every 6h to acquire new ssl certificates
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - 80:80
      - 443:443

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: es01
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
    volumes:
      # bind mount - <host-folder>:<container-folder>
      # bind mount can be accessed on host computer, but changing data might invoke errors in container
      # bind mount - /home/ykb/persistant_data/elasticsearch:/usr/share/elasticsearch/data
      # volume - <volume-name>:<container-path>
      # currently using bind mount approach
      - /data/es_index:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
        #networks:
        #- elastic_mongo
   
  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    env_file:
      - mongo_db.env
    volumes:
      - /data/db:/data/db
    ports:
      - 27017:27017
        #networks:
        #- elastic_mongo

  postgres_db:
    image: postgres:14.1-alpine
    container_name: postgres_db
    environment:
      PGDATA: /var/lib/postgresql/data/users/
    env_file:
      - postgres_db.env
    volumes:
      - ./data/postgres_db:/var/lib/postgresql/data
    ports:
      - 5432:5432
      
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    ports:
      - 5050:80
    environment:
      - SCRIPT_NAME=/pgadmin
    env_file:
      ./pgadmin.env
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin

  mongo_express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: fiitkar
      ME_CONFIG_MONGODB_ADMINPASSWORD: fiitkar_team8
      ME_CONFIG_SITE_BASEURL: /express
      ME_CONFIG_MONGODB_URL: mongodb://fiitkar:fiitkar_team8@mongo_db:27017/


  flask_server:
    image: fiitteam8/flask_server:latest
    container_name: flask_server
    env_file:
      - mongo_db.env
    ports:
      - 5000:5000
  
  node_server:
    image: fiitteam8/node_server:latest
    container_name: node_server
    ports:
      - 8080:8080

  scraper:
    container_name: scraper
    image: fiitteam8/news_scraper
    ports:
      - 6800:6800
    volumes:
      - /home/fiitkar/scrapyd.conf:/myApp/scraper/scrapyd.conf
    environment:
      MONGO_SERVER_URL: mongo_db
      MONGO_SERVER_PORT: 27017
      MONGO_USER: fiitkar
      MONGO_PASSWORD: fiitkar_team8
      MONGO_DB: admin

  documentation:
    container_name: documentation
    image: fiitteam8/ams_team_documentation:latest
    ports:
      - 8888:8888

  #index_service:
   #image: fiitteam8/es_indexer:latest
   #container_name: index_service
   #env_file:
     #- mongo_db.env
   #depends_on:
     #- mongo_db
     #- es01
    #networks:
     #- elastic_mongo

#networks:
  #elastic_mongo:
    #driver: bridge

# WHEN USING index_service uncomment networks in mongo_db, es01 container and networks tag

